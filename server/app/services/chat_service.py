from datetime import datetime
import logging
from functools import lru_cache
from typing import Any, Dict, List

from firebase_admin import firestore
from agents import TResponseInputItem

from app.config import get_settings
from app.repositories import ChatRepository
from app.services.agent_service import AgentService, get_agent_service
from app.services.notification_service import NotificationService, get_notification_service

logger = logging.getLogger(__name__)

class ChatService:
    """
    Service to orchestrate chat interactions, including fetching history,
    generating AI responses, and persisting conversation turns.
    """
    _chat_repo: ChatRepository
    _agent_service: AgentService
    _notification_service: NotificationService

    def __init__(
            self,
            chat_repo: ChatRepository,
            agent_service: AgentService,
            notification_service: NotificationService
        ):
        self._chat_repo = chat_repo
        self._agent_service = agent_service
        self._notification_service = notification_service

    def _format_history_for_agent(self, history: List[Dict[str, Any]]) -> List[TResponseInputItem]:
        """
        Converts Firestore message history into the format expected by the OpenAI Agents SDK.
        """
        formatted_history: List[TResponseInputItem] = []
        for message in history:
            role = "assistant" if message.get("senderId") == "AI_ASSISTANT" else "user"
            content = message.get("text", "")
            if content:
                formatted_history.append({"role": role, "content": content})
        return formatted_history

    async def generate_and_save_response(
        self,
        user_id: str,
        user_message: str,
        client_message_id: str,
        client_timestamp: datetime,
    ):
        """
        Processes a user's message, gets an AI response, and saves both to Firestore.

        Args:
            user_id: The ID of the user sending the message.
            user_message: The text of the user's message.
            client_message_id: The unique ID for the user's message, generated by the client.
            client_timestamp: The timestamp when the message was sent by the client.
        """
        try:
            # 1. Fetch existing conversation history from Firestore
            history_docs = self._chat_repo.get_message_history(user_id)
            
            # 2. Format history for the AI agent and add the new user message
            conversation_history = self._format_history_for_agent(history_docs)
            conversation_history.append({"role": "user", "content": user_message})

            # 3. Get the AI's response
            logger.info(f"Generating AI response for user '{user_id}'.")
            ai_response_text = await self._agent_service.get_response(conversation_history)

            # 4. Prepare the messages to be saved in Firestore
            user_message_payload = {
                "text": user_message,
                "senderId": user_id,
                "timestamp": client_timestamp,
            }

            logger.info(user_message_payload)
            ai_message_payload = {
                "text": ai_response_text,
                "senderId": "AI_ASSISTANT",
                "timestamp": firestore.SERVER_TIMESTAMP,
            }

            # 5. Save the user message (with client-provided ID) and the new AI message
            logger.info(f"Saving conversation turn for user '{user_id}'.")
            self._chat_repo.add_messages(
                user_id=user_id,
                messages=[
                    {"id": client_message_id, "data": user_message_payload},
                    {"data": ai_message_payload}, # AI message will get an auto-generated ID
                ],
            )
            logger.info(f"Successfully processed and saved chat turn for user '{user_id}'.")

            logger.info(f"Attempting to send notification to user '{user_id}'.")
            fcm_tokens = self._chat_repo.get_user_fcm_tokens(user_id)
            if fcm_tokens:
                self._notification_service.send_notification_to_devices(
                    tokens=fcm_tokens,
                    title="You have a new message!",
                    body=ai_response_text[:100] + ('...' if len(ai_response_text) > 100 else '')
                )
            else:
                logger.info(f"User '{user_id}' has no FCM notkens. Skipping notification.")


        except Exception as e:
            logger.error(
                f"An error occurred in ChatService for user '{user_id}': {e}",
                exc_info=True,
            )
            # In a real-world scenario, you might want to save an error message
            # to Firestore or notify the user in some way. For now, we just log it.
            raise # Re-raise the exception to be handled by the API endpoint


# --- Dependency Injection ---

@lru_cache
def get_chat_service() -> ChatService:
    """
    Dependency injector for the ChatService.
    """
    settings = get_settings()
    # Note: firestore.client() is initialized in main.py
    db_client = firestore.client()
    
    chat_repo = ChatRepository(db_client=db_client, settings=settings)
    agent_service = get_agent_service()
    notification_service = get_notification_service()
    
    return ChatService(chat_repo=chat_repo, agent_service=agent_service, notification_service=notification_service)